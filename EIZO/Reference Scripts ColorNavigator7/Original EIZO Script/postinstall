#!/bin/sh

#-------------------------------------------------------------------------------
# Defines
#-------------------------------------------------------------------------------

readonly PLUGS="./bin/plugs"
readonly SRC_PLUGINS_DIR="./plugins"

readonly APP_DATA_DIR="/Library/Application Support/EIZO/ColorNavigator 7"
readonly INIT_SETTING_DIR="${APP_DATA_DIR}/_initialsetting"
readonly PLUGINS_DIR="${APP_DATA_DIR}/plugins"

readonly PKG_DIR=`dirname "${PACKAGE_PATH}"`
readonly INST_FLAG_DIR="${HOME}/.com.eizo.cn7.inst"

# since v7.1.1
readonly LOCK_FILE_DIR="/Users/Shared/EIZO"

# since v7.1.2
readonly LANG_PACK_DIR="${APP_DATA_DIR}/langPacks"

# Install plugins
readonly PLUGINS=(
	"com.eizo.cn7.libs"
	"com.eizo.cn7.sensorsdk"
	"com.eizo.framework.syrup"
	"com.eizo.framework.salt"
	"com.eizo.framework.sugar"
	"com.eizo.framework.flour"
	"com.eizo.framework.milk"
	"com.eizo.framework.oil"
	"com.eizo.framework.yeast"
	"com.eizo.cn7.data.value"
	"com.eizo.cn7.capability"
	"com.eizo.cn7.core"
	"com.eizo.cn7.i18n.de"
	"com.eizo.cn7.i18n.en"
	"com.eizo.cn7.i18n.ja"
	"com.eizo.cn7.i18n.zh"
	"com.eizo.cn7.base"
	"com.eizo.cn7.data.model"
	"com.eizo.cn7.common"
	"com.eizo.cn7.calibration"
	"com.eizo.cn7.manualAdjustment"
	"com.eizo.cn7.rgbValidation"
	"com.eizo.cn7.ui"
	"com.eizo.cn7.apiServer"
	"com.eizo.cn7.ext.assetinformationmanagement"
	"com.eizo.cn7.ext.cmykValidation"
	"com.eizo.cn7.ext.cnnetwork"
	"com.eizo.cn7.ext.correlation"
	"com.eizo.cn7.ext.deviceMeasurement"
	"com.eizo.cn7.ext.iccProfileEmulation"
	"com.eizo.cn7.ext.lightbooth"
	"com.eizo.cn7.ext.logViewLutEmulation"
	"com.eizo.cn7.ext.monitorkeylocksetting"
	"com.eizo.cn7.ext.monitoroptionsetting"
	"com.eizo.cn7.ext.profadvsetting"
	"com.eizo.cn7.ext.syncAdjustmentInformation"
	"com.eizo.cn7.ext.targetCreationAssist"
	"com.eizo.cn7.ext.monitorConfigExportImport"
)

#-------------------------------------------------------------------------------
# Install plugins
#-------------------------------------------------------------------------------

umask 000
for pluginName in ${PLUGINS[@]}; do
	"${PLUGS}" "${PLUGINS_DIR}" install "${SRC_PLUGINS_DIR}/${pluginName}.zip"
	wait
done
umask 022

#-------------------------------------------------------------------------------
# Handle installer setting/selection
#-------------------------------------------------------------------------------

rm -rf "${INIT_SETTING_DIR}"
mkdir "${INIT_SETTING_DIR}"
chmod 777 "${INIT_SETTING_DIR}"

# Remove CN6
if [ -e "${INST_FLAG_DIR}/remove_cn6" ]; then
	killall "ColorNavigator 6"
	# terminate eacore and dummy
	for i in `ps aux -w | grep 'ColorNavigator 6.app' | grep -v grep | awk '{print $2}'`
	do
		kill $i
	done

	rm -rf "/Applications/ColorNavigator 6.app"
	wait
fi

# Remove CNNX
if [ -e "/Applications/ColorNavigator NX.app" ]; then
	killall "ColorNavigator NX"
	# terminate eacore and dummy
	for i in `ps aux -w | grep 'ColorNavigator NX.app' | grep -v grep | awk '{print $2}'`
	do
		kill $i
	done

	rm -rf "/Applications/ColorNavigator NX.app"
	wait
fi

# Remove CNNetAgent
if [ -e "/Applications/CNNetAgent.app" ]; then
	killall "CNNetAgent"
	rm -rf "/Applications/CNNetAgent.app"
	wait
fi

#-------------------------------------------------------------------------------
# Create initSetting files
#-------------------------------------------------------------------------------

# Create check_update file
if [ -e "${INST_FLAG_DIR}/checks_update" ]; then
	cat /dev/null > "${INIT_SETTING_DIR}/checks_update"
fi

# When silent install is executed, create check_update file and silent_install file
if [ ${COMMAND_LINE_INSTALL} == '1' ]; then
	cat /dev/null > "${INIT_SETTING_DIR}/checks_update"
	cat /dev/null > "${INIT_SETTING_DIR}/is_silent_install"
fi

#-------------------------------------------------------------------------------
# Handle installer setting files
#-------------------------------------------------------------------------------

# Preferences
PREF_FILE="preferences.json"
if [ -e "${PKG_DIR}/${PREF_FILE}" ]; then
	OUT_FILE_PATH="${INIT_SETTING_DIR}/${PREF_FILE}"
	cp "${PKG_DIR}/${PREF_FILE}" "${OUT_FILE_PATH}"
	chmod 666 "${OUT_FILE_PATH}"
fi

# Language packs
mkdir "${LANG_PACK_DIR}" >& /dev/null
chmod 777 "${LANG_PACK_DIR}"

delete_backup_if_need() {
	# find previous version backup file in langPacks folder
	for backup in "${LANG_PACK_DIR}/"*".zip"; do
		fileName=`echo ${backup} | awk -F/ '{print $NF}'`
		if [ "${fileName}" != "*.zip" ]; then
			if "${PLUGS}" "${PLUGINS_DIR}" validate "${backup}"; [ $? -eq 0 ]; then
				langName=`"${PLUGS}" "${PLUGINS_DIR}" name "${file}"`
				backupLangName=`"${PLUGS}" "${PLUGINS_DIR}" name "${backup}"`
				# delete old language pack if exist
				if [ "${langName}" = "${backupLangName}" ]; then
					rm -rf "${backup}"
				fi
			fi
		fi
	done
}

for file in "${PKG_DIR}/"*".zip"; do
	fileName=`echo ${file} | awk -F/ '{print $NF}'`
	if [ "${fileName}" != "*.zip" ]; then
		# validate whether zip file is plugin file or not
		if "${PLUGS}" "${PLUGINS_DIR}" validate "${file}"; [ $? -eq 0 ]; then
			delete_backup_if_need
			# copy new language pack to backup folder
			cp -a "${file}" "${LANG_PACK_DIR}/"
		fi
	fi
done

# Setup CNNetwork
./bin/set_net_mac.sh -src "${PKG_DIR}" -dst "${INIT_SETTING_DIR}"

# installer-config.json
cp "${PKG_DIR}/installer-config.json" "${INIT_SETTING_DIR}/"

#-------------------------------------------------------------------------------
# Additional Setup
#-------------------------------------------------------------------------------

# Make symbolic link for lightbooth
ln -sf /usr/local/lib/libftd2xx.1.2.2.dylib /usr/local/lib/libftd2xx.dylib

# Make symbolic link for K-10
ln -sf "${PLUGINS_DIR}/exports/mac/libftd2xx.1.4.24.dylib" "${PLUGINS_DIR}/exports/mac/libftd2xx.dylib"

# Make symbolic link for EX5
ln -sf "${PLUGINS_DIR}/exports/mac/libi1d3LSdk.1.4.2.1.dylib" "${PLUGINS_DIR}/exports/mac/libi1d3LSdk.dylib"

# db name is changed from v7.0.5. So if db has old name, it need to update.
if [ -d "${APP_DATA_DIR}/db" -a ! -d "${APP_DATA_DIR}/db.0" ]; then
	mv "${APP_DATA_DIR}/db" "${APP_DATA_DIR}/db.0"
elif [ ! -d "${APP_DATA_DIR}/db.0" ]; then
	mkdir  "${APP_DATA_DIR}/db.0"
fi

# Install lang pack
umask 000
for langPack in "${LANG_PACK_DIR}/"*".zip"; do
	fileName=`echo ${langPack} | awk -F/ '{print $NF}'`
	if [ "${fileName}" != "*.zip" ]; then
		"${PLUGS}" "${PLUGINS_DIR}" install "${langPack}"
		wait
	fi
done
umask 022

#-------------------------------------------------------------------------------
# Creanup
#-------------------------------------------------------------------------------

# Remove installer setting file
if [ -e "${INST_FLAG_DIR}" ]; then
	rm -rf "${INST_FLAG_DIR}"
fi

# For Permission error by Mac updating
chmod 777 /Library/Application\ Support/EIZO/ColorNavigator\ 7
chmod 777 /Library/Application\ Support/EIZO/ColorNavigator\ 7/backup
chmod 777 /Library/Application\ Support/EIZO/ColorNavigator\ 7/db.0
chmod 777 /Library/Application\ Support/EIZO/db
chmod u+w ~/
chmod a+rx /usr/local/lib

# since v7.1.1
# Update access right of lock file folder
# In some environments, /User/Shared/EIZO folder permission is changed to 755
if [ ! -e "${LOCK_FILE_DIR}" ]; then
	mkdir "${LOCK_FILE_DIR}"
fi
chmod -R 777 "${LOCK_FILE_DIR}"

# Launch Application
su "${USER}" -c "open /Applications/ColorNavigator\ 7.app"

# Ignore error at app launch
if [ $? -ne 0 ]; then
	exit 0
fi
